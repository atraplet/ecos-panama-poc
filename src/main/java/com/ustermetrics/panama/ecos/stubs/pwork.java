// Generated by jextract

package com.ustermetrics.panama.ecos.stubs;

import java.lang.invoke.VarHandle;

import jdk.incubator.foreign.*;
import static jdk.incubator.foreign.CLinker.*;
public class pwork {

    static final MemoryLayout $struct$LAYOUT = MemoryLayout.structLayout(
        C_LONG_LONG.withName("n"),
        C_LONG_LONG.withName("m"),
        C_LONG_LONG.withName("p"),
        C_LONG_LONG.withName("D"),
        C_POINTER.withName("x"),
        C_POINTER.withName("y"),
        C_POINTER.withName("z"),
        C_POINTER.withName("s"),
        C_POINTER.withName("lambda"),
        C_DOUBLE.withName("kap"),
        C_DOUBLE.withName("tau"),
        C_POINTER.withName("best_x"),
        C_POINTER.withName("best_y"),
        C_POINTER.withName("best_z"),
        C_POINTER.withName("best_s"),
        C_DOUBLE.withName("best_kap"),
        C_DOUBLE.withName("best_tau"),
        C_DOUBLE.withName("best_cx"),
        C_DOUBLE.withName("best_by"),
        C_DOUBLE.withName("best_hz"),
        C_POINTER.withName("best_info"),
        C_POINTER.withName("dsaff"),
        C_POINTER.withName("dzaff"),
        C_POINTER.withName("W_times_dzaff"),
        C_POINTER.withName("dsaff_by_W"),
        C_POINTER.withName("saff"),
        C_POINTER.withName("zaff"),
        C_POINTER.withName("C"),
        C_POINTER.withName("A"),
        C_POINTER.withName("G"),
        C_POINTER.withName("c"),
        C_POINTER.withName("b"),
        C_POINTER.withName("h"),
        C_POINTER.withName("AtoK"),
        C_POINTER.withName("GtoK"),
        C_POINTER.withName("xequil"),
        C_POINTER.withName("Aequil"),
        C_POINTER.withName("Gequil"),
        C_DOUBLE.withName("resx0"),
        C_DOUBLE.withName("resy0"),
        C_DOUBLE.withName("resz0"),
        C_POINTER.withName("rx"),
        C_POINTER.withName("ry"),
        C_POINTER.withName("rz"),
        C_DOUBLE.withName("rt"),
        C_DOUBLE.withName("hresx"),
        C_DOUBLE.withName("hresy"),
        C_DOUBLE.withName("hresz"),
        C_DOUBLE.withName("nx"),
        C_DOUBLE.withName("ny"),
        C_DOUBLE.withName("nz"),
        C_DOUBLE.withName("ns"),
        C_DOUBLE.withName("cx"),
        C_DOUBLE.withName("by"),
        C_DOUBLE.withName("hz"),
        C_DOUBLE.withName("sz"),
        C_POINTER.withName("KKT"),
        C_POINTER.withName("info"),
        C_POINTER.withName("stgs")
    ).withName("pwork");
    public static MemoryLayout $LAYOUT() {
        return pwork.$struct$LAYOUT;
    }
    static final VarHandle n$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("n"));
    public static VarHandle n$VH() {
        return pwork.n$VH;
    }
    public static long n$get(MemorySegment seg) {
        return (long)pwork.n$VH.get(seg);
    }
    public static void n$set( MemorySegment seg, long x) {
        pwork.n$VH.set(seg, x);
    }
    public static long n$get(MemorySegment seg, long index) {
        return (long)pwork.n$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n$set(MemorySegment seg, long index, long x) {
        pwork.n$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("m"));
    public static VarHandle m$VH() {
        return pwork.m$VH;
    }
    public static long m$get(MemorySegment seg) {
        return (long)pwork.m$VH.get(seg);
    }
    public static void m$set( MemorySegment seg, long x) {
        pwork.m$VH.set(seg, x);
    }
    public static long m$get(MemorySegment seg, long index) {
        return (long)pwork.m$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m$set(MemorySegment seg, long index, long x) {
        pwork.m$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle p$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("p"));
    public static VarHandle p$VH() {
        return pwork.p$VH;
    }
    public static long p$get(MemorySegment seg) {
        return (long)pwork.p$VH.get(seg);
    }
    public static void p$set( MemorySegment seg, long x) {
        pwork.p$VH.set(seg, x);
    }
    public static long p$get(MemorySegment seg, long index) {
        return (long)pwork.p$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void p$set(MemorySegment seg, long index, long x) {
        pwork.p$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle D$VH = $struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("D"));
    public static VarHandle D$VH() {
        return pwork.D$VH;
    }
    public static long D$get(MemorySegment seg) {
        return (long)pwork.D$VH.get(seg);
    }
    public static void D$set( MemorySegment seg, long x) {
        pwork.D$VH.set(seg, x);
    }
    public static long D$get(MemorySegment seg, long index) {
        return (long)pwork.D$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void D$set(MemorySegment seg, long index, long x) {
        pwork.D$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle x$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("x")));
    public static VarHandle x$VH() {
        return pwork.x$VH;
    }
    public static MemoryAddress x$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.x$VH.get(seg);
    }
    public static void x$set( MemorySegment seg, MemoryAddress x) {
        pwork.x$VH.set(seg, x);
    }
    public static MemoryAddress x$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle y$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("y")));
    public static VarHandle y$VH() {
        return pwork.y$VH;
    }
    public static MemoryAddress y$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.y$VH.get(seg);
    }
    public static void y$set( MemorySegment seg, MemoryAddress x) {
        pwork.y$VH.set(seg, x);
    }
    public static MemoryAddress y$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle z$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("z")));
    public static VarHandle z$VH() {
        return pwork.z$VH;
    }
    public static MemoryAddress z$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.z$VH.get(seg);
    }
    public static void z$set( MemorySegment seg, MemoryAddress x) {
        pwork.z$VH.set(seg, x);
    }
    public static MemoryAddress z$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.z$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void z$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.z$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle s$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("s")));
    public static VarHandle s$VH() {
        return pwork.s$VH;
    }
    public static MemoryAddress s$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.s$VH.get(seg);
    }
    public static void s$set( MemorySegment seg, MemoryAddress x) {
        pwork.s$VH.set(seg, x);
    }
    public static MemoryAddress s$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.s$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void s$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.s$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lambda$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("lambda")));
    public static VarHandle lambda$VH() {
        return pwork.lambda$VH;
    }
    public static MemoryAddress lambda$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.lambda$VH.get(seg);
    }
    public static void lambda$set( MemorySegment seg, MemoryAddress x) {
        pwork.lambda$VH.set(seg, x);
    }
    public static MemoryAddress lambda$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.lambda$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lambda$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.lambda$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle kap$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("kap"));
    public static VarHandle kap$VH() {
        return pwork.kap$VH;
    }
    public static double kap$get(MemorySegment seg) {
        return (double)pwork.kap$VH.get(seg);
    }
    public static void kap$set( MemorySegment seg, double x) {
        pwork.kap$VH.set(seg, x);
    }
    public static double kap$get(MemorySegment seg, long index) {
        return (double)pwork.kap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void kap$set(MemorySegment seg, long index, double x) {
        pwork.kap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tau$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("tau"));
    public static VarHandle tau$VH() {
        return pwork.tau$VH;
    }
    public static double tau$get(MemorySegment seg) {
        return (double)pwork.tau$VH.get(seg);
    }
    public static void tau$set( MemorySegment seg, double x) {
        pwork.tau$VH.set(seg, x);
    }
    public static double tau$get(MemorySegment seg, long index) {
        return (double)pwork.tau$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tau$set(MemorySegment seg, long index, double x) {
        pwork.tau$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle best_x$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("best_x")));
    public static VarHandle best_x$VH() {
        return pwork.best_x$VH;
    }
    public static MemoryAddress best_x$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.best_x$VH.get(seg);
    }
    public static void best_x$set( MemorySegment seg, MemoryAddress x) {
        pwork.best_x$VH.set(seg, x);
    }
    public static MemoryAddress best_x$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.best_x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void best_x$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.best_x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle best_y$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("best_y")));
    public static VarHandle best_y$VH() {
        return pwork.best_y$VH;
    }
    public static MemoryAddress best_y$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.best_y$VH.get(seg);
    }
    public static void best_y$set( MemorySegment seg, MemoryAddress x) {
        pwork.best_y$VH.set(seg, x);
    }
    public static MemoryAddress best_y$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.best_y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void best_y$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.best_y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle best_z$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("best_z")));
    public static VarHandle best_z$VH() {
        return pwork.best_z$VH;
    }
    public static MemoryAddress best_z$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.best_z$VH.get(seg);
    }
    public static void best_z$set( MemorySegment seg, MemoryAddress x) {
        pwork.best_z$VH.set(seg, x);
    }
    public static MemoryAddress best_z$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.best_z$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void best_z$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.best_z$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle best_s$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("best_s")));
    public static VarHandle best_s$VH() {
        return pwork.best_s$VH;
    }
    public static MemoryAddress best_s$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.best_s$VH.get(seg);
    }
    public static void best_s$set( MemorySegment seg, MemoryAddress x) {
        pwork.best_s$VH.set(seg, x);
    }
    public static MemoryAddress best_s$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.best_s$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void best_s$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.best_s$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle best_kap$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("best_kap"));
    public static VarHandle best_kap$VH() {
        return pwork.best_kap$VH;
    }
    public static double best_kap$get(MemorySegment seg) {
        return (double)pwork.best_kap$VH.get(seg);
    }
    public static void best_kap$set( MemorySegment seg, double x) {
        pwork.best_kap$VH.set(seg, x);
    }
    public static double best_kap$get(MemorySegment seg, long index) {
        return (double)pwork.best_kap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void best_kap$set(MemorySegment seg, long index, double x) {
        pwork.best_kap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle best_tau$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("best_tau"));
    public static VarHandle best_tau$VH() {
        return pwork.best_tau$VH;
    }
    public static double best_tau$get(MemorySegment seg) {
        return (double)pwork.best_tau$VH.get(seg);
    }
    public static void best_tau$set( MemorySegment seg, double x) {
        pwork.best_tau$VH.set(seg, x);
    }
    public static double best_tau$get(MemorySegment seg, long index) {
        return (double)pwork.best_tau$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void best_tau$set(MemorySegment seg, long index, double x) {
        pwork.best_tau$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle best_cx$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("best_cx"));
    public static VarHandle best_cx$VH() {
        return pwork.best_cx$VH;
    }
    public static double best_cx$get(MemorySegment seg) {
        return (double)pwork.best_cx$VH.get(seg);
    }
    public static void best_cx$set( MemorySegment seg, double x) {
        pwork.best_cx$VH.set(seg, x);
    }
    public static double best_cx$get(MemorySegment seg, long index) {
        return (double)pwork.best_cx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void best_cx$set(MemorySegment seg, long index, double x) {
        pwork.best_cx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle best_by$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("best_by"));
    public static VarHandle best_by$VH() {
        return pwork.best_by$VH;
    }
    public static double best_by$get(MemorySegment seg) {
        return (double)pwork.best_by$VH.get(seg);
    }
    public static void best_by$set( MemorySegment seg, double x) {
        pwork.best_by$VH.set(seg, x);
    }
    public static double best_by$get(MemorySegment seg, long index) {
        return (double)pwork.best_by$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void best_by$set(MemorySegment seg, long index, double x) {
        pwork.best_by$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle best_hz$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("best_hz"));
    public static VarHandle best_hz$VH() {
        return pwork.best_hz$VH;
    }
    public static double best_hz$get(MemorySegment seg) {
        return (double)pwork.best_hz$VH.get(seg);
    }
    public static void best_hz$set( MemorySegment seg, double x) {
        pwork.best_hz$VH.set(seg, x);
    }
    public static double best_hz$get(MemorySegment seg, long index) {
        return (double)pwork.best_hz$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void best_hz$set(MemorySegment seg, long index, double x) {
        pwork.best_hz$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle best_info$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("best_info")));
    public static VarHandle best_info$VH() {
        return pwork.best_info$VH;
    }
    public static MemoryAddress best_info$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.best_info$VH.get(seg);
    }
    public static void best_info$set( MemorySegment seg, MemoryAddress x) {
        pwork.best_info$VH.set(seg, x);
    }
    public static MemoryAddress best_info$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.best_info$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void best_info$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.best_info$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dsaff$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("dsaff")));
    public static VarHandle dsaff$VH() {
        return pwork.dsaff$VH;
    }
    public static MemoryAddress dsaff$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.dsaff$VH.get(seg);
    }
    public static void dsaff$set( MemorySegment seg, MemoryAddress x) {
        pwork.dsaff$VH.set(seg, x);
    }
    public static MemoryAddress dsaff$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.dsaff$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dsaff$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.dsaff$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dzaff$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("dzaff")));
    public static VarHandle dzaff$VH() {
        return pwork.dzaff$VH;
    }
    public static MemoryAddress dzaff$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.dzaff$VH.get(seg);
    }
    public static void dzaff$set( MemorySegment seg, MemoryAddress x) {
        pwork.dzaff$VH.set(seg, x);
    }
    public static MemoryAddress dzaff$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.dzaff$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dzaff$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.dzaff$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle W_times_dzaff$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("W_times_dzaff")));
    public static VarHandle W_times_dzaff$VH() {
        return pwork.W_times_dzaff$VH;
    }
    public static MemoryAddress W_times_dzaff$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.W_times_dzaff$VH.get(seg);
    }
    public static void W_times_dzaff$set( MemorySegment seg, MemoryAddress x) {
        pwork.W_times_dzaff$VH.set(seg, x);
    }
    public static MemoryAddress W_times_dzaff$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.W_times_dzaff$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void W_times_dzaff$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.W_times_dzaff$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle dsaff_by_W$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("dsaff_by_W")));
    public static VarHandle dsaff_by_W$VH() {
        return pwork.dsaff_by_W$VH;
    }
    public static MemoryAddress dsaff_by_W$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.dsaff_by_W$VH.get(seg);
    }
    public static void dsaff_by_W$set( MemorySegment seg, MemoryAddress x) {
        pwork.dsaff_by_W$VH.set(seg, x);
    }
    public static MemoryAddress dsaff_by_W$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.dsaff_by_W$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void dsaff_by_W$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.dsaff_by_W$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle saff$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("saff")));
    public static VarHandle saff$VH() {
        return pwork.saff$VH;
    }
    public static MemoryAddress saff$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.saff$VH.get(seg);
    }
    public static void saff$set( MemorySegment seg, MemoryAddress x) {
        pwork.saff$VH.set(seg, x);
    }
    public static MemoryAddress saff$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.saff$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void saff$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.saff$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle zaff$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("zaff")));
    public static VarHandle zaff$VH() {
        return pwork.zaff$VH;
    }
    public static MemoryAddress zaff$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.zaff$VH.get(seg);
    }
    public static void zaff$set( MemorySegment seg, MemoryAddress x) {
        pwork.zaff$VH.set(seg, x);
    }
    public static MemoryAddress zaff$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.zaff$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void zaff$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.zaff$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle C$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("C")));
    public static VarHandle C$VH() {
        return pwork.C$VH;
    }
    public static MemoryAddress C$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.C$VH.get(seg);
    }
    public static void C$set( MemorySegment seg, MemoryAddress x) {
        pwork.C$VH.set(seg, x);
    }
    public static MemoryAddress C$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.C$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void C$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.C$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle A$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("A")));
    public static VarHandle A$VH() {
        return pwork.A$VH;
    }
    public static MemoryAddress A$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.A$VH.get(seg);
    }
    public static void A$set( MemorySegment seg, MemoryAddress x) {
        pwork.A$VH.set(seg, x);
    }
    public static MemoryAddress A$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.A$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void A$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.A$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle G$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("G")));
    public static VarHandle G$VH() {
        return pwork.G$VH;
    }
    public static MemoryAddress G$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.G$VH.get(seg);
    }
    public static void G$set( MemorySegment seg, MemoryAddress x) {
        pwork.G$VH.set(seg, x);
    }
    public static MemoryAddress G$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.G$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void G$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.G$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle c$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("c")));
    public static VarHandle c$VH() {
        return pwork.c$VH;
    }
    public static MemoryAddress c$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.c$VH.get(seg);
    }
    public static void c$set( MemorySegment seg, MemoryAddress x) {
        pwork.c$VH.set(seg, x);
    }
    public static MemoryAddress c$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.c$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void c$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.c$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle b$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("b")));
    public static VarHandle b$VH() {
        return pwork.b$VH;
    }
    public static MemoryAddress b$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.b$VH.get(seg);
    }
    public static void b$set( MemorySegment seg, MemoryAddress x) {
        pwork.b$VH.set(seg, x);
    }
    public static MemoryAddress b$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.b$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void b$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.b$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle h$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("h")));
    public static VarHandle h$VH() {
        return pwork.h$VH;
    }
    public static MemoryAddress h$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.h$VH.get(seg);
    }
    public static void h$set( MemorySegment seg, MemoryAddress x) {
        pwork.h$VH.set(seg, x);
    }
    public static MemoryAddress h$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.h$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void h$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.h$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle AtoK$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("AtoK")));
    public static VarHandle AtoK$VH() {
        return pwork.AtoK$VH;
    }
    public static MemoryAddress AtoK$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.AtoK$VH.get(seg);
    }
    public static void AtoK$set( MemorySegment seg, MemoryAddress x) {
        pwork.AtoK$VH.set(seg, x);
    }
    public static MemoryAddress AtoK$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.AtoK$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void AtoK$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.AtoK$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle GtoK$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("GtoK")));
    public static VarHandle GtoK$VH() {
        return pwork.GtoK$VH;
    }
    public static MemoryAddress GtoK$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.GtoK$VH.get(seg);
    }
    public static void GtoK$set( MemorySegment seg, MemoryAddress x) {
        pwork.GtoK$VH.set(seg, x);
    }
    public static MemoryAddress GtoK$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.GtoK$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void GtoK$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.GtoK$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle xequil$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("xequil")));
    public static VarHandle xequil$VH() {
        return pwork.xequil$VH;
    }
    public static MemoryAddress xequil$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.xequil$VH.get(seg);
    }
    public static void xequil$set( MemorySegment seg, MemoryAddress x) {
        pwork.xequil$VH.set(seg, x);
    }
    public static MemoryAddress xequil$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.xequil$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void xequil$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.xequil$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Aequil$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Aequil")));
    public static VarHandle Aequil$VH() {
        return pwork.Aequil$VH;
    }
    public static MemoryAddress Aequil$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.Aequil$VH.get(seg);
    }
    public static void Aequil$set( MemorySegment seg, MemoryAddress x) {
        pwork.Aequil$VH.set(seg, x);
    }
    public static MemoryAddress Aequil$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.Aequil$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Aequil$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.Aequil$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle Gequil$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("Gequil")));
    public static VarHandle Gequil$VH() {
        return pwork.Gequil$VH;
    }
    public static MemoryAddress Gequil$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.Gequil$VH.get(seg);
    }
    public static void Gequil$set( MemorySegment seg, MemoryAddress x) {
        pwork.Gequil$VH.set(seg, x);
    }
    public static MemoryAddress Gequil$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.Gequil$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void Gequil$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.Gequil$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle resx0$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("resx0"));
    public static VarHandle resx0$VH() {
        return pwork.resx0$VH;
    }
    public static double resx0$get(MemorySegment seg) {
        return (double)pwork.resx0$VH.get(seg);
    }
    public static void resx0$set( MemorySegment seg, double x) {
        pwork.resx0$VH.set(seg, x);
    }
    public static double resx0$get(MemorySegment seg, long index) {
        return (double)pwork.resx0$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void resx0$set(MemorySegment seg, long index, double x) {
        pwork.resx0$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle resy0$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("resy0"));
    public static VarHandle resy0$VH() {
        return pwork.resy0$VH;
    }
    public static double resy0$get(MemorySegment seg) {
        return (double)pwork.resy0$VH.get(seg);
    }
    public static void resy0$set( MemorySegment seg, double x) {
        pwork.resy0$VH.set(seg, x);
    }
    public static double resy0$get(MemorySegment seg, long index) {
        return (double)pwork.resy0$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void resy0$set(MemorySegment seg, long index, double x) {
        pwork.resy0$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle resz0$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("resz0"));
    public static VarHandle resz0$VH() {
        return pwork.resz0$VH;
    }
    public static double resz0$get(MemorySegment seg) {
        return (double)pwork.resz0$VH.get(seg);
    }
    public static void resz0$set( MemorySegment seg, double x) {
        pwork.resz0$VH.set(seg, x);
    }
    public static double resz0$get(MemorySegment seg, long index) {
        return (double)pwork.resz0$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void resz0$set(MemorySegment seg, long index, double x) {
        pwork.resz0$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rx$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("rx")));
    public static VarHandle rx$VH() {
        return pwork.rx$VH;
    }
    public static MemoryAddress rx$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.rx$VH.get(seg);
    }
    public static void rx$set( MemorySegment seg, MemoryAddress x) {
        pwork.rx$VH.set(seg, x);
    }
    public static MemoryAddress rx$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.rx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rx$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.rx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ry$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("ry")));
    public static VarHandle ry$VH() {
        return pwork.ry$VH;
    }
    public static MemoryAddress ry$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.ry$VH.get(seg);
    }
    public static void ry$set( MemorySegment seg, MemoryAddress x) {
        pwork.ry$VH.set(seg, x);
    }
    public static MemoryAddress ry$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.ry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ry$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.ry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rz$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("rz")));
    public static VarHandle rz$VH() {
        return pwork.rz$VH;
    }
    public static MemoryAddress rz$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.rz$VH.get(seg);
    }
    public static void rz$set( MemorySegment seg, MemoryAddress x) {
        pwork.rz$VH.set(seg, x);
    }
    public static MemoryAddress rz$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.rz$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rz$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.rz$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rt$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("rt"));
    public static VarHandle rt$VH() {
        return pwork.rt$VH;
    }
    public static double rt$get(MemorySegment seg) {
        return (double)pwork.rt$VH.get(seg);
    }
    public static void rt$set( MemorySegment seg, double x) {
        pwork.rt$VH.set(seg, x);
    }
    public static double rt$get(MemorySegment seg, long index) {
        return (double)pwork.rt$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rt$set(MemorySegment seg, long index, double x) {
        pwork.rt$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hresx$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("hresx"));
    public static VarHandle hresx$VH() {
        return pwork.hresx$VH;
    }
    public static double hresx$get(MemorySegment seg) {
        return (double)pwork.hresx$VH.get(seg);
    }
    public static void hresx$set( MemorySegment seg, double x) {
        pwork.hresx$VH.set(seg, x);
    }
    public static double hresx$get(MemorySegment seg, long index) {
        return (double)pwork.hresx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hresx$set(MemorySegment seg, long index, double x) {
        pwork.hresx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hresy$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("hresy"));
    public static VarHandle hresy$VH() {
        return pwork.hresy$VH;
    }
    public static double hresy$get(MemorySegment seg) {
        return (double)pwork.hresy$VH.get(seg);
    }
    public static void hresy$set( MemorySegment seg, double x) {
        pwork.hresy$VH.set(seg, x);
    }
    public static double hresy$get(MemorySegment seg, long index) {
        return (double)pwork.hresy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hresy$set(MemorySegment seg, long index, double x) {
        pwork.hresy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hresz$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("hresz"));
    public static VarHandle hresz$VH() {
        return pwork.hresz$VH;
    }
    public static double hresz$get(MemorySegment seg) {
        return (double)pwork.hresz$VH.get(seg);
    }
    public static void hresz$set( MemorySegment seg, double x) {
        pwork.hresz$VH.set(seg, x);
    }
    public static double hresz$get(MemorySegment seg, long index) {
        return (double)pwork.hresz$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hresz$set(MemorySegment seg, long index, double x) {
        pwork.hresz$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nx$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("nx"));
    public static VarHandle nx$VH() {
        return pwork.nx$VH;
    }
    public static double nx$get(MemorySegment seg) {
        return (double)pwork.nx$VH.get(seg);
    }
    public static void nx$set( MemorySegment seg, double x) {
        pwork.nx$VH.set(seg, x);
    }
    public static double nx$get(MemorySegment seg, long index) {
        return (double)pwork.nx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nx$set(MemorySegment seg, long index, double x) {
        pwork.nx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ny$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("ny"));
    public static VarHandle ny$VH() {
        return pwork.ny$VH;
    }
    public static double ny$get(MemorySegment seg) {
        return (double)pwork.ny$VH.get(seg);
    }
    public static void ny$set( MemorySegment seg, double x) {
        pwork.ny$VH.set(seg, x);
    }
    public static double ny$get(MemorySegment seg, long index) {
        return (double)pwork.ny$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ny$set(MemorySegment seg, long index, double x) {
        pwork.ny$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nz$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("nz"));
    public static VarHandle nz$VH() {
        return pwork.nz$VH;
    }
    public static double nz$get(MemorySegment seg) {
        return (double)pwork.nz$VH.get(seg);
    }
    public static void nz$set( MemorySegment seg, double x) {
        pwork.nz$VH.set(seg, x);
    }
    public static double nz$get(MemorySegment seg, long index) {
        return (double)pwork.nz$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nz$set(MemorySegment seg, long index, double x) {
        pwork.nz$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ns$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("ns"));
    public static VarHandle ns$VH() {
        return pwork.ns$VH;
    }
    public static double ns$get(MemorySegment seg) {
        return (double)pwork.ns$VH.get(seg);
    }
    public static void ns$set( MemorySegment seg, double x) {
        pwork.ns$VH.set(seg, x);
    }
    public static double ns$get(MemorySegment seg, long index) {
        return (double)pwork.ns$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ns$set(MemorySegment seg, long index, double x) {
        pwork.ns$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cx$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("cx"));
    public static VarHandle cx$VH() {
        return pwork.cx$VH;
    }
    public static double cx$get(MemorySegment seg) {
        return (double)pwork.cx$VH.get(seg);
    }
    public static void cx$set( MemorySegment seg, double x) {
        pwork.cx$VH.set(seg, x);
    }
    public static double cx$get(MemorySegment seg, long index) {
        return (double)pwork.cx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cx$set(MemorySegment seg, long index, double x) {
        pwork.cx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle by$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("by"));
    public static VarHandle by$VH() {
        return pwork.by$VH;
    }
    public static double by$get(MemorySegment seg) {
        return (double)pwork.by$VH.get(seg);
    }
    public static void by$set( MemorySegment seg, double x) {
        pwork.by$VH.set(seg, x);
    }
    public static double by$get(MemorySegment seg, long index) {
        return (double)pwork.by$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void by$set(MemorySegment seg, long index, double x) {
        pwork.by$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle hz$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("hz"));
    public static VarHandle hz$VH() {
        return pwork.hz$VH;
    }
    public static double hz$get(MemorySegment seg) {
        return (double)pwork.hz$VH.get(seg);
    }
    public static void hz$set( MemorySegment seg, double x) {
        pwork.hz$VH.set(seg, x);
    }
    public static double hz$get(MemorySegment seg, long index) {
        return (double)pwork.hz$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hz$set(MemorySegment seg, long index, double x) {
        pwork.hz$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle sz$VH = $struct$LAYOUT.varHandle(double.class, MemoryLayout.PathElement.groupElement("sz"));
    public static VarHandle sz$VH() {
        return pwork.sz$VH;
    }
    public static double sz$get(MemorySegment seg) {
        return (double)pwork.sz$VH.get(seg);
    }
    public static void sz$set( MemorySegment seg, double x) {
        pwork.sz$VH.set(seg, x);
    }
    public static double sz$get(MemorySegment seg, long index) {
        return (double)pwork.sz$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sz$set(MemorySegment seg, long index, double x) {
        pwork.sz$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle KKT$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("KKT")));
    public static VarHandle KKT$VH() {
        return pwork.KKT$VH;
    }
    public static MemoryAddress KKT$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.KKT$VH.get(seg);
    }
    public static void KKT$set( MemorySegment seg, MemoryAddress x) {
        pwork.KKT$VH.set(seg, x);
    }
    public static MemoryAddress KKT$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.KKT$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void KKT$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.KKT$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle info$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("info")));
    public static VarHandle info$VH() {
        return pwork.info$VH;
    }
    public static MemoryAddress info$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.info$VH.get(seg);
    }
    public static void info$set( MemorySegment seg, MemoryAddress x) {
        pwork.info$VH.set(seg, x);
    }
    public static MemoryAddress info$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.info$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void info$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.info$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stgs$VH = MemoryHandles.asAddressVarHandle($struct$LAYOUT.varHandle(long.class, MemoryLayout.PathElement.groupElement("stgs")));
    public static VarHandle stgs$VH() {
        return pwork.stgs$VH;
    }
    public static MemoryAddress stgs$get(MemorySegment seg) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.stgs$VH.get(seg);
    }
    public static void stgs$set( MemorySegment seg, MemoryAddress x) {
        pwork.stgs$VH.set(seg, x);
    }
    public static MemoryAddress stgs$get(MemorySegment seg, long index) {
        return (jdk.incubator.foreign.MemoryAddress)pwork.stgs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stgs$set(MemorySegment seg, long index, MemoryAddress x) {
        pwork.stgs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocate(ResourceScope scope) { return allocate(SegmentAllocator.ofScope(scope)); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment allocateArray(int len, ResourceScope scope) {
        return allocateArray(len, SegmentAllocator.ofScope(scope));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, ResourceScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


