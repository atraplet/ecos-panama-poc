// Generated by jextract

package com.ustermetrics.panama.ecos.stubs;

import java.lang.invoke.MethodHandle;

import jdk.incubator.foreign.*;

public class ecos_h  {

    static {
        System.loadLibrary("ecos");
    }

    static final SymbolLookup LIBRARIES = RuntimeHelper.lookup();    /* package-private */ ecos_h() {}
    public static MethodHandle ECOS_setup$MH() {
        return RuntimeHelper.requireNonNull(constants$0.ECOS_setup$MH,"ECOS_setup");
    }
    public static MemoryAddress ECOS_setup ( long n,  long m,  long p,  long l,  long ncones,  Addressable q,  long nex,  Addressable Gpr,  Addressable Gjc,  Addressable Gir,  Addressable Apr,  Addressable Ajc,  Addressable Air,  Addressable c,  Addressable h,  Addressable b) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.ECOS_setup$MH, "ECOS_setup");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact(n, m, p, l, ncones, q.address(), nex, Gpr.address(), Gjc.address(), Gir.address(), Apr.address(), Ajc.address(), Air.address(), c.address(), h.address(), b.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECOS_solve$MH() {
        return RuntimeHelper.requireNonNull(constants$0.ECOS_solve$MH,"ECOS_solve");
    }
    public static long ECOS_solve ( Addressable w) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.ECOS_solve$MH, "ECOS_solve");
        try {
            return (long)mh$.invokeExact(w.address());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECOS_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$0.ECOS_cleanup$MH,"ECOS_cleanup");
    }
    public static void ECOS_cleanup ( Addressable w,  long keepvars) {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.ECOS_cleanup$MH, "ECOS_cleanup");
        try {
            mh$.invokeExact(w.address(), keepvars);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ECOS_ver$MH() {
        return RuntimeHelper.requireNonNull(constants$0.ECOS_ver$MH,"ECOS_ver");
    }
    public static MemoryAddress ECOS_ver () {
        var mh$ = RuntimeHelper.requireNonNull(constants$0.ECOS_ver$MH, "ECOS_ver");
        try {
            return (jdk.incubator.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


